{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { supabase } from \"../../initSupabase\";\nimport { Layout, Text, TextInput, Button, useTheme, themeColor } from \"react-native-rapi-ui\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function (_ref) {\n  var navigation = _ref.navigation;\n\n  var _useTheme = useTheme(),\n      isDarkmode = _useTheme.isDarkmode,\n      setTheme = _useTheme.setTheme;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  function forget() {\n    var _await$supabase$auth$, data, error;\n\n    return _regeneratorRuntime.async(function forget$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setLoading(true);\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(supabase.auth.api.resetPasswordForEmail(email));\n\n          case 3:\n            _await$supabase$auth$ = _context.sent;\n            data = _await$supabase$auth$.data;\n            error = _await$supabase$auth$.error;\n\n            if (!error) {\n              setLoading(false);\n              alert(\"Check your email to reset your password!\");\n            }\n\n            if (error) {\n              setLoading(false);\n              alert(error.message);\n            }\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  return _jsx(KeyboardAvoidingView, {\n    behavior: \"height\",\n    enabled: true,\n    style: {\n      flex: 1\n    },\n    children: _jsx(Layout, {\n      children: _jsxs(ScrollView, {\n        contentContainerStyle: {\n          flexGrow: 1\n        },\n        children: [_jsx(View, {\n          style: {\n            flex: 1,\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            backgroundColor: isDarkmode ? \"#17171E\" : themeColor.white100\n          },\n          children: _jsx(Image, {\n            resizeMode: \"contain\",\n            style: {\n              height: 220,\n              width: 220\n            },\n            source: require(\"../../../assets/images/forget.png\")\n          })\n        }), _jsxs(View, {\n          style: {\n            flex: 3,\n            paddingHorizontal: 20,\n            paddingBottom: 20,\n            backgroundColor: isDarkmode ? themeColor.dark : themeColor.white\n          },\n          children: [_jsx(Text, {\n            size: \"h3\",\n            fontWeight: \"bold\",\n            style: {\n              alignSelf: \"center\",\n              padding: 30\n            },\n            children: \"Forget Password\"\n          }), _jsx(Text, {\n            children: \"Email\"\n          }), _jsx(TextInput, {\n            containerStyle: {\n              marginTop: 15\n            },\n            placeholder: \"Enter your email\",\n            value: email,\n            autoCapitalize: \"none\",\n            autoCompleteType: \"off\",\n            autoCorrect: false,\n            keyboardType: \"email-address\",\n            onChangeText: function onChangeText(text) {\n              return setEmail(text);\n            }\n          }), _jsx(Button, {\n            text: loading ? \"Loading\" : \"Send email\",\n            onPress: function onPress() {\n              forget();\n            },\n            style: {\n              marginTop: 20\n            },\n            disabled: loading\n          }), _jsxs(View, {\n            style: {\n              flexDirection: \"row\",\n              alignItems: \"center\",\n              marginTop: 15,\n              justifyContent: \"center\"\n            },\n            children: [_jsx(Text, {\n              size: \"md\",\n              children: \"Already have an account?\"\n            }), _jsx(TouchableOpacity, {\n              onPress: function onPress() {\n                navigation.navigate(\"Login\");\n              },\n              children: _jsx(Text, {\n                size: \"md\",\n                fontWeight: \"bold\",\n                style: {\n                  marginLeft: 5\n                },\n                children: \"Login here\"\n              })\n            })]\n          }), _jsx(View, {\n            style: {\n              flexDirection: \"row\",\n              alignItems: \"center\",\n              marginTop: 30,\n              justifyContent: \"center\"\n            },\n            children: _jsx(TouchableOpacity, {\n              onPress: function onPress() {\n                isDarkmode ? setTheme(\"light\") : setTheme(\"dark\");\n              },\n              children: _jsx(Text, {\n                size: \"md\",\n                fontWeight: \"bold\",\n                style: {\n                  marginLeft: 5\n                },\n                children: isDarkmode ? \"‚òÄÔ∏è light theme\" : \"üåë dark theme\"\n              })\n            })\n          })]\n        })]\n      })\n    })\n  });\n}","map":{"version":3,"sources":["/Users/wassimdahmane/Documents/personal/projects/expo-supabase/src/screens/auth/ForgetPassword.tsx"],"names":["React","useState","supabase","Layout","Text","TextInput","Button","useTheme","themeColor","navigation","isDarkmode","setTheme","email","setEmail","loading","setLoading","forget","auth","api","resetPasswordForEmail","data","error","alert","message","flex","flexGrow","justifyContent","alignItems","backgroundColor","white100","height","width","require","paddingHorizontal","paddingBottom","dark","white","alignSelf","padding","marginTop","text","flexDirection","navigate","marginLeft"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { StatusBar } from \"expo-status-bar\";\nimport {\n  ScrollView,\n  TouchableOpacity,\n  View,\n  KeyboardAvoidingView,\n  Image,\n} from \"react-native\";\nimport { supabase } from \"../../initSupabase\";\nimport { AuthStackParamList } from \"../../types/navigation\";\nimport { NativeStackScreenProps } from \"@react-navigation/native-stack\";\nimport {\n  Layout,\n  Text,\n  TextInput,\n  Button,\n  useTheme,\n  themeColor,\n} from \"react-native-rapi-ui\";\n\nexport default function ({\n  navigation,\n}: NativeStackScreenProps<AuthStackParamList, \"ForgetPassword\">) {\n  const { isDarkmode, setTheme } = useTheme();\n  const [email, setEmail] = useState<string>(\"\");\n  const [loading, setLoading] = useState<boolean>(false);\n\n  async function forget() {\n    setLoading(true);\n    const { data, error } = await supabase.auth.api.resetPasswordForEmail(\n      email\n    );\n    if (!error) {\n      setLoading(false);\n      alert(\"Check your email to reset your password!\");\n    }\n    if (error) {\n      setLoading(false);\n      alert(error.message);\n    }\n  }\n  return (\n    <KeyboardAvoidingView behavior=\"height\" enabled style={{ flex: 1 }}>\n      <Layout>\n        <ScrollView\n          contentContainerStyle={{\n            flexGrow: 1,\n          }}\n        >\n          <View\n            style={{\n              flex: 1,\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              backgroundColor: isDarkmode ? \"#17171E\" : themeColor.white100,\n            }}\n          >\n            <Image\n              resizeMode=\"contain\"\n              style={{\n                height: 220,\n                width: 220,\n              }}\n              source={require(\"../../../assets/images/forget.png\")}\n            />\n          </View>\n          <View\n            style={{\n              flex: 3,\n              paddingHorizontal: 20,\n              paddingBottom: 20,\n              backgroundColor: isDarkmode ? themeColor.dark : themeColor.white,\n            }}\n          >\n            <Text\n              size=\"h3\"\n              fontWeight=\"bold\"\n              style={{\n                alignSelf: \"center\",\n                padding: 30,\n              }}\n            >\n              Forget Password\n            </Text>\n            <Text>Email</Text>\n            <TextInput\n              containerStyle={{ marginTop: 15 }}\n              placeholder=\"Enter your email\"\n              value={email}\n              autoCapitalize=\"none\"\n              autoCompleteType=\"off\"\n              autoCorrect={false}\n              keyboardType=\"email-address\"\n              onChangeText={(text) => setEmail(text)}\n            />\n            <Button\n              text={loading ? \"Loading\" : \"Send email\"}\n              onPress={() => {\n                forget();\n              }}\n              style={{\n                marginTop: 20,\n              }}\n              disabled={loading}\n            />\n\n            <View\n              style={{\n                flexDirection: \"row\",\n                alignItems: \"center\",\n                marginTop: 15,\n                justifyContent: \"center\",\n              }}\n            >\n              <Text size=\"md\">Already have an account?</Text>\n              <TouchableOpacity\n                onPress={() => {\n                  navigation.navigate(\"Login\");\n                }}\n              >\n                <Text\n                  size=\"md\"\n                  fontWeight=\"bold\"\n                  style={{\n                    marginLeft: 5,\n                  }}\n                >\n                  Login here\n                </Text>\n              </TouchableOpacity>\n            </View>\n            <View\n              style={{\n                flexDirection: \"row\",\n                alignItems: \"center\",\n                marginTop: 30,\n                justifyContent: \"center\",\n              }}\n            >\n              <TouchableOpacity\n                onPress={() => {\n                  isDarkmode ? setTheme(\"light\") : setTheme(\"dark\");\n                }}\n              >\n                <Text\n                  size=\"md\"\n                  fontWeight=\"bold\"\n                  style={{\n                    marginLeft: 5,\n                  }}\n                >\n                  {isDarkmode ? \"‚òÄÔ∏è light theme\" : \"üåë dark theme\"}\n                </Text>\n              </TouchableOpacity>\n            </View>\n          </View>\n        </ScrollView>\n      </Layout>\n    </KeyboardAvoidingView>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}