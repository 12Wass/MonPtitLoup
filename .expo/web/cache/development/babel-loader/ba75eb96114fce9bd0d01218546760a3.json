{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { createContext, useState, useEffect } from 'react';\nimport { supabase } from \"../initSupabase\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar AuthContext = createContext({});\n\nvar AuthProvider = function AuthProvider(props) {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      session = _useState4[0],\n      setSession = _useState4[1];\n\n  useEffect(function () {\n    var session = supabase.auth.session();\n    setSession(session);\n    setUser(session ? true : false);\n\n    var _supabase$auth$onAuth = supabase.auth.onAuthStateChange(function _callee(event, session) {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log(\"Supabase auth event: \" + event);\n              setSession(session);\n              setUser(session ? true : false);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }),\n        authListener = _supabase$auth$onAuth.data;\n\n    return function () {\n      authListener.unsubscribe();\n    };\n  }, [user]);\n  return _jsx(AuthContext.Provider, {\n    value: {\n      user: user,\n      session: session\n    },\n    children: props.children\n  });\n};\n\nexport { AuthContext, AuthProvider };","map":{"version":3,"sources":["/Users/wassimdahmane/Documents/personal/projects/expo-supabase/src/provider/AuthProvider.tsx"],"names":["React","createContext","useState","useEffect","supabase","AuthContext","AuthProvider","props","user","setUser","session","setSession","auth","onAuthStateChange","event","console","log","authListener","data","unsubscribe","children"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,SAAzC,QAA0D,OAA1D;AACA,SAASC,QAAT;;AAOA,IAAMC,WAAW,GAAGJ,aAAa,CAAwB,EAAxB,CAAjC;;AAMA,IAAMK,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAkB;AAEtC,kBAAwBL,QAAQ,CAAiB,IAAjB,CAAhC;AAAA;AAAA,MAAOM,IAAP;AAAA,MAAaC,OAAb;;AACA,mBAA8BP,QAAQ,CAAiB,IAAjB,CAAtC;AAAA;AAAA,MAAOQ,OAAP;AAAA,MAAgBC,UAAhB;;AAEAR,EAAAA,SAAS,CAAC,YAAM;AACf,QAAMO,OAAO,GAAGN,QAAQ,CAACQ,IAAT,CAAcF,OAAd,EAAhB;AACAC,IAAAA,UAAU,CAACD,OAAD,CAAV;AACAD,IAAAA,OAAO,CAACC,OAAO,GAAG,IAAH,GAAU,KAAlB,CAAP;;AACA,gCAA+BN,QAAQ,CAACQ,IAAT,CAAcC,iBAAd,CAC9B,iBAAOC,KAAP,EAAcJ,OAAd;AAAA;AAAA;AAAA;AAAA;AACCK,cAAAA,OAAO,CAACC,GAAR,2BAAoCF,KAApC;AACAH,cAAAA,UAAU,CAACD,OAAD,CAAV;AACAD,cAAAA,OAAO,CAACC,OAAO,GAAG,IAAH,GAAU,KAAlB,CAAP;;AAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAD8B,CAA/B;AAAA,QAAcO,YAAd,yBAAQC,IAAR;;AAOA,WAAO,YAAM;AACZD,MAAAA,YAAY,CAAEE,WAAd;AACA,KAFD;AAGA,GAdQ,EAcN,CAACX,IAAD,CAdM,CAAT;AAgBA,SACC,KAAC,WAAD,CAAa,QAAb;AACC,IAAA,KAAK,EAAE;AACNA,MAAAA,IAAI,EAAJA,IADM;AAENE,MAAAA,OAAO,EAAPA;AAFM,KADR;AAAA,cAMEH,KAAK,CAACa;AANR,IADD;AAUA,CA/BD;;AAiCA,SAASf,WAAT,EAAsBC,YAAtB","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport { supabase } from '../initSupabase';\nimport { Session } from '@supabase/supabase-js';\ntype ContextProps = {\n\tuser: null | boolean;\n\tsession: Session | null;\n};\n\nconst AuthContext = createContext<Partial<ContextProps>>({});\n\ninterface Props {\n\tchildren: React.ReactNode;\n}\n\nconst AuthProvider = (props: Props) => {\n\t// user null = loading\n\tconst [user, setUser] = useState<null | boolean>(null);\n\tconst [session, setSession] = useState<Session | null>(null);\n\n\tuseEffect(() => {\n\t\tconst session = supabase.auth.session();\n\t\tsetSession(session);\n\t\tsetUser(session ? true : false);\n\t\tconst { data: authListener } = supabase.auth.onAuthStateChange(\n\t\t\tasync (event, session) => {\n\t\t\t\tconsole.log(`Supabase auth event: ${event}`);\n\t\t\t\tsetSession(session);\n\t\t\t\tsetUser(session ? true : false);\n\t\t\t}\n\t\t);\n\t\treturn () => {\n\t\t\tauthListener!.unsubscribe();\n\t\t};\n\t}, [user]);\n\n\treturn (\n\t\t<AuthContext.Provider\n\t\t\tvalue={{\n\t\t\t\tuser,\n\t\t\t\tsession,\n\t\t\t}}\n\t\t>\n\t\t\t{props.children}\n\t\t</AuthContext.Provider>\n\t);\n};\n\nexport { AuthContext, AuthProvider };\n"]},"metadata":{},"sourceType":"module"}