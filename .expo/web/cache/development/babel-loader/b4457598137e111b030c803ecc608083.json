{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Button, Layout, themeColor, TopNav, useTheme } from \"react-native-rapi-ui\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport Toast from 'react-native-toast-message';\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport default function (_ref) {\n  var navigation = _ref.navigation;\n\n  var _useTheme = useTheme(),\n      isDarkmode = _useTheme.isDarkmode,\n      setTheme = _useTheme.setTheme;\n\n  var _useState = useState([{\n    key: '',\n    value: ''\n  }]),\n      _useState2 = _slicedToArray(_useState, 2),\n      inputs = _useState2[0],\n      setInputs = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isSixPlayers = _useState4[0],\n      setIsSixPlayers = _useState4[1];\n\n  var latestInput = inputs[Object.keys(inputs)[Object.keys(inputs).length - 1]];\n\n  var addHandler = function addHandler() {\n    var _inputs = _toConsumableArray(inputs);\n\n    if (typeof latestInput === \"undefined\" || latestInput[\"value\"].length >= 2) {\n      _inputs.push({\n        key: '',\n        value: ''\n      });\n\n      setInputs(_inputs);\n    } else {\n      Toast.show({\n        type: 'error',\n        text1: 'Oups !',\n        text2: 'Le nom d\\'un joueur doit contenir au moins deux lettres'\n      });\n    }\n\n    if (_inputs.length > 5) {\n      setIsSixPlayers(true);\n    }\n  };\n\n  var deleteHandler = function deleteHandler(key) {\n    var _inputs = inputs.filter(function (input, index) {\n      return index != key;\n    });\n\n    if (_inputs.length < 6) {\n      setIsSixPlayers(false);\n    }\n\n    setInputs(_inputs);\n  };\n\n  var inputHandler = function inputHandler(text, key) {\n    var _inputs = _toConsumableArray(inputs);\n\n    _inputs[key].value = text;\n    _inputs[key].key = key;\n    setInputs(_inputs);\n  };\n\n  var launchGame = function launchGame() {\n    if (latestInput.value === \"\" || latestInput.value.length < 2) {\n      Toast.show({\n        type: 'error',\n        text1: 'Oups !',\n        text2: 'Un champ est vide - trop court.'\n      });\n    }\n  };\n\n  var storeData = function storeData(value) {\n    return _regeneratorRuntime.async(function storeData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem('@storage_Key', value));\n\n          case 3:\n            _context.next = 8;\n            break;\n\n          case 5:\n            _context.prev = 5;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 5]], Promise);\n  };\n\n  var styles = StyleSheet.create({\n    input: {\n      color: \"rgb(255, 255, 255)\",\n      fontFamily: \"Ubuntu_400Regular\",\n      marginLeft: 0,\n      marginRight: 0,\n      paddingTop: 10,\n      paddingBottom: 10,\n      paddingRight: 20,\n      paddingLeft: 20,\n      borderColor: \"rgb(38, 40, 52)\",\n      borderRadius: 8,\n      borderWidth: 1,\n      justifyContent: \"space-between\"\n    }\n  });\n  return _jsxs(Layout, {\n    children: [_jsx(TopNav, {\n      middleContent: \"Choix des joueurs\",\n      leftContent: _jsx(Ionicons, {\n        name: \"chevron-back\",\n        size: 20,\n        color: isDarkmode ? themeColor.white100 : themeColor.dark\n      }),\n      leftAction: function leftAction() {\n        return navigation.goBack();\n      },\n      rightContent: _jsx(Ionicons, {\n        name: isDarkmode ? \"sunny\" : \"moon\",\n        size: 20,\n        color: isDarkmode ? themeColor.white100 : themeColor.dark\n      }),\n      rightAction: function rightAction() {\n        if (isDarkmode) {\n          setTheme(\"light\");\n        } else {\n          setTheme(\"dark\");\n        }\n      }\n    }), _jsxs(View, {\n      style: {\n        flex: 1,\n        alignItems: \"center\",\n        justifyContent: \"center\"\n      },\n      children: [inputs.map(function (input, key) {\n        return _jsxs(View, {\n          style: {\n            flexDirection: 'row',\n            justifyContent: 'flex-start',\n            padding: 10\n          },\n          children: [_jsx(TextInput, {\n            style: styles.input,\n            placeholder: \"Nom du joueur\",\n            value: input.value,\n            onChangeText: function onChangeText(text) {\n              return inputHandler(text, key);\n            }\n          }), _jsx(TouchableOpacity, {\n            onPress: function onPress() {\n              return deleteHandler(key);\n            },\n            children: _jsx(Ionicons, {\n              name: isDarkmode ? \"person-remove-outline\" : \"person-remove\",\n              size: 20,\n              style: {\n                padding: 10\n              }\n            })\n          })]\n        }, key);\n      }), _jsx(Button, {\n        style: {\n          marginTop: 10\n        },\n        text: \"Ajouter un nouveau joueur\",\n        status: \"info\",\n        onPress: addHandler\n      }), isSixPlayers ? _jsx(Button, {\n        style: {\n          marginTop: 10\n        },\n        text: \"Lancer la partie\",\n        status: \"success\",\n        onPress: launchGame\n      }) : _jsx(_Fragment, {}), _jsx(Toast, {\n        position: \"top\",\n        bottomOffset: 20\n      })]\n    })]\n  });\n}","map":{"version":3,"sources":["/Users/wassimdahmane/Documents/personal/projects/expo-supabase/src/screens/GameForm.tsx"],"names":["React","useState","Button","Layout","themeColor","TopNav","useTheme","Ionicons","Toast","AsyncStorage","navigation","isDarkmode","setTheme","key","value","inputs","setInputs","isSixPlayers","setIsSixPlayers","latestInput","Object","keys","length","addHandler","_inputs","push","show","type","text1","text2","deleteHandler","filter","input","index","inputHandler","text","launchGame","storeData","setItem","console","log","styles","StyleSheet","create","color","fontFamily","marginLeft","marginRight","paddingTop","paddingBottom","paddingRight","paddingLeft","borderColor","borderRadius","borderWidth","justifyContent","white100","dark","goBack","flex","alignItems","map","flexDirection","padding","marginTop"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport {Linking, StyleSheet, TextInput, TouchableOpacity, View} from \"react-native\";\nimport { MainStackParamList } from \"../types/navigation\";\nimport { NativeStackScreenProps } from \"@react-navigation/native-stack\";\nimport {Button, Layout, Text, themeColor, TopNav, useTheme} from \"react-native-rapi-ui\";\nimport {Ionicons} from \"@expo/vector-icons\";\nimport Toast from 'react-native-toast-message';\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport WerewolfLogo from \"../components/utils/WerewolfLogo\";\n\nexport default function ({\n  navigation,\n}: NativeStackScreenProps<MainStackParamList, \"MainTabs\">) {\n    const { isDarkmode, setTheme } = useTheme();\n    const [inputs, setInputs] = useState([{key: '', value: ''}])\n    const [isSixPlayers, setIsSixPlayers] = useState(false);\n    // @ts-ignore\n    const latestInput = inputs[Object.keys(inputs)[Object.keys(inputs).length - 1]];\n    // TODO : Limiter le nombre de joueurs\n    // TODO : Renommer les inputs en player et conserver le state quelque part pour toujours y avoir accès.\n\n    const addHandler = () => {\n        const _inputs = [...inputs];\n\n        if (typeof(latestInput) === \"undefined\" || latestInput[\"value\"].length >= 2) {\n            _inputs.push({key: '', value: ''});\n            setInputs(_inputs);\n        } else {\n            Toast.show({\n                type: 'error',\n                text1: 'Oups !',\n                text2: 'Le nom d\\'un joueur doit contenir au moins deux lettres'\n            });\n        }\n\n        if (_inputs.length > 5) {\n            setIsSixPlayers(true);\n        }\n    }\n\n    const deleteHandler = (key: number) => {\n        const _inputs = inputs.filter((input, index) => index != key);\n        if (_inputs.length < 6) {\n            setIsSixPlayers(false);\n        }\n        setInputs(_inputs);\n    }\n\n    const inputHandler = (text: any, key: any) => {\n        const _inputs = [...inputs];\n        _inputs[key].value = text;\n        _inputs[key].key = key;\n        setInputs(_inputs);\n    }\n\n    const launchGame = () => {\n        // Vérification : Si le dernier Input n'est pas rempli, on renvoie une erreur.\n        if (latestInput.value === \"\" || latestInput.value.length < 2){\n            Toast.show({\n                type: 'error',\n                text1: 'Oups !',\n                text2: 'Un champ est vide - trop court.'\n            });\n        }\n\n        // Stocker le state dans l'AsyncStorage.\n        \n    }\n\n    const storeData = async (value: any) => {\n        try {\n            await AsyncStorage.setItem('@storage_Key', value)\n        } catch (e) {\n            console.log(e);\n        }\n    }\n\n\n    const styles = StyleSheet.create({\n        input: {\n            color: \"rgb(255, 255, 255)\",\n            fontFamily: \"Ubuntu_400Regular\",\n            marginLeft: 0,\n            marginRight: 0,\n            paddingTop: 10,\n            paddingBottom: 10,\n            paddingRight: 20,\n            paddingLeft: 20,\n            borderColor: \"rgb(38, 40, 52)\",\n            borderRadius: 8,\n            borderWidth: 1,\n            justifyContent: \"space-between\",\n        }\n    })\n\n    return (\n    <Layout>\n        <TopNav\n            middleContent=\"Choix des joueurs\"\n            leftContent={\n                <Ionicons\n                    name=\"chevron-back\"\n                    size={20}\n                    color={isDarkmode ? themeColor.white100 : themeColor.dark}\n                />\n            }\n            leftAction={() => navigation.goBack()}\n            rightContent={\n                <Ionicons\n                    name={isDarkmode ? \"sunny\" : \"moon\"}\n                    size={20}\n                    color={isDarkmode ? themeColor.white100 : themeColor.dark}\n                />\n            }\n            rightAction={() => {\n                if (isDarkmode) {\n                    setTheme(\"light\");\n                } else {\n                    setTheme(\"dark\");\n                }\n            }}\n        />\n      <View\n        style={{\n          flex: 1,\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        }}\n      >\n          { inputs.map((input,key) => (\n              <View style={{\n                  flexDirection: 'row',\n                  justifyContent: 'flex-start',\n                  padding: 10\n              }} key={key}>\n                <TextInput style={styles.input} placeholder={\"Nom du joueur\"} value={input.value} onChangeText={(text) => inputHandler(text, key)} />\n                <TouchableOpacity onPress={() => deleteHandler(key)}>\n                    <Ionicons\n                        name={isDarkmode ? \"person-remove-outline\" : \"person-remove\"}\n                        size={20}\n                        style={{\n                            padding: 10\n                        }}\n                    />\n                </TouchableOpacity>\n              </View>\n          ))}\n          <Button\n              style={{ marginTop: 10 }}\n              text=\"Ajouter un nouveau joueur\"\n              status=\"info\"\n              onPress={addHandler}\n          />\n          { isSixPlayers ?\n              <Button\n              style={{ marginTop: 10 }}\n              text=\"Lancer la partie\"\n              status=\"success\"\n              onPress={launchGame}\n            /> : <></> }\n          <Toast position='top' bottomOffset={20} />\n      </View>\n    </Layout>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}